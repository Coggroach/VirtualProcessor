ControlMemoryCode
-----------------

Na		Next Address in Car
x


EOI 	End of Interrupt
UmA		If Set, Specifies Um to follow (has Priority over Umx)

Um3
Um2		Sets UserMode 
Um1		//0 is Default and Wont Change Mode
Um0		//System = 001, Interrupt = 010, Unprevilaged = 100

LDPC	Expose PC
STPC	Set PC
Fs5		Branch Code/
Fs4		Function Code

Fs3		
Fs2		
Fs1		
Fs0		

Bu		Update Branch Flags
Din		Data In (Has Priority over Min)
Cin		Constant In
Il		Store Instruction

Cir		Other Interrupt
Mout 	Memory Out
Min		Memory In
Cmem	Memory Interrupt (Wait) (Has Priority over Ci and Con)

Con		0 -> Load Na  1 -> Load Opcode
Ci		0 -> Load Car 1 -> Increment Car
Pl		Add To PC
Pi		Increment PC

Lr		Load Register
Td		Use Temp as Destination
Ta		Use Temp in Channel A
Tb		Use Temp in Channel B

FlashMemoryCode
---------------

ControlMemoryAddress (16 Bit)
Extra Register Slot	 (4 Bit)
Destination Register (4 Bit)
Source A Register	 (4 Bit)
Source B Register    (4 Bit)

Interrupts
----------

RequestInput (32Bits)

0-7 Reserved

UserModes
---------

CurrentMode -> DestinationMode
1. System		1, 2, 3, 4
2. Interupt		1, 2, 3, 4
3. Previlaged	2, 3, 4
4. UnPrevilaged	4

If ExecutionMode (UmA) is set
Command will only be executed if in the same
mode as or destination mode is valid


Opcodes for Assembler
---------------------

Type 1: ADD rx, ry, C
Type 2: LDR rx, C
Type 3: BEQ C
Type 5: STR rx, [ry, C]
Type 7: INC rx
Type 8: Compound Command.
            
000 - 0 : C   - 0
001 - 1 : K   - 1
010 - 2 : F   - 3
011 - 3 : FK  - 4
100 - 4 : R   - 1
101 - 5 : RK  - 2
110 - 6 : RF  - 4
111 - 7 : RFK - 5

Backup
------

0000 0000 0000 0300
0000 0000 0000 004C
0000 0000 0040 1002

Compound Commands
-----------------

LDM sp! {r0-r1, r3, r4-r5}^

MOV 	rt, #0
SUB 	sp, sp, #1
LDRST 	r0, [sp, rt]
MOV 	rt, #0
SUB 	sp, sp, #1
LDRST 	r1, [sp, rt]
MOV 	rt, #0
SUB 	sp, sp, #1
MOV 	rt, #0
SUB 	sp, sp, #1
LDRST 	r3, [sp, rt]
MOV 	rt, #0
SUB 	sp, sp, #1
LDRST 	r4, [sp, rt]
MOV 	rt, #0
SUB 	sp, sp, #1
LDRST 	r5, [sp, rt]
PCST 	lr

LDM sp {r0-r1, r3, r4-r5}^

MOV 	rt, sp
SUB 	rt, rt, #1
LDRST 	r0, [sp, rt]
MOV 	rt, sp
SUB 	rt, sp, #2
LDRST 	r1, [sp, rt]
MOV 	rt, sp
SUB 	rt, rt, #3
LDRST 	r3, [sp, rt]
MOV 	rt, sp
SUB 	rt, rt, #4
LDRST 	r4, [sp, rt]
MOV 	rt, sp
SUB 	rt, rt, #5
LDRST 	r5, [sp, rt]
PCST 	lr

STM sp {r0-r1, r3, r4-r5}

MOV 	rt, #0
STR 	r0, [sp, rt]
ADD 	rt, rt, #1
STR 	r1, [sp, rt]
ADD 	rt, rt, #1
STR 	r3, [sp, rt]
ADD 	rt, rt, #1
STR 	r4, [sp, rt]
ADD 	rt, rt, #1
STR 	r5, [sp, rt]
ADD 	rt, rt, #1